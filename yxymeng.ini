parsers: # array
  - reg: ^.*$
    code: |
      module.exports.parse = (raw, { yaml }) => {
        const rawObj = yaml.parse(raw)
        const groups = []
        const rules = []
        return yaml.stringify({ ...rawObj, 'proxy-groups': groups, rules })
      } 

    yaml:
      prepend-proxy-groups: # 建立策略组

        - name: PROXY 
          type: select

        - name: 自动选择
          type: url-test
          url: http://www.gstatic.com/generate_204 #延迟测速地址
          interval: 300                           #延迟测试时间间隔/秒

        - name: Steam
          type: fallback
          url: http://www.gstatic.com/generate_204 
          interval: 300   

        - name: 代理模式 
          type: select
          proxies:
            - PROXY # 黑名单模式，意为「只有命中规则的网络流量，才使用代理」
            - DIRECT # 白名单模式，意为「没有命中规则的网络流量，统统使用代理」

        - name: 广告拦截
          type: select
          proxies:
            - DIRECT
            - REJECT
            - PROXY 

      commands:
        - proxy-groups.PROXY.proxies=[]proxyNames|^[^游戏]*$  # 这个可以自定义，这个正则的意思是排除节点名字有“游戏”的节点。
        - proxy-groups.自动选择.proxies=[]proxyNames|^[^游戏]*$ # 这个可以自定义，这个正则的意思是排除节点名字有“游戏”的节点。
        - proxy-groups.Steam.proxies=[]proxyNames|tr|土耳其|TurKey|tk

        - proxy-groups.PROXY.proxies.0+自动选择 # 向指定分组第一个位置添加一个 自动选择 节点名
        - proxy-groups.PROXY.proxies.1+DIRECT  # 向指定分组第二个位置添加一个 DIRECT 节点名

      prepend-rules: # 规则由上往下遍历，如上面规则已经命中，则不再往下处理
        - PROCESS-NAME,115chrome.exe,DIRECT
        - DOMAIN-KEYWORD,epic,DIRECT
        - DOMAIN-KEYWORD,we.gofly,DIRECT
        - DOMAIN-KEYWORD,subhd,DIRECT
        - DOMAIN-KEYWORD,btnull,DIRECT
        - DOMAIN-KEYWORD,zmk,DIRECT
        - DOMAIN-KEYWORD,zimuku,DIRECT
        - PROCESS-NAME,steamwebhelper.exe,Steam
        - PROCESS-NAME,steam.exe,Steam
        - DOMAIN-KEYWORD,steam,Steam
        - RULE-SET,applications,DIRECT   #RULE-SET就是设置下面的规则集的
        - DOMAIN,clash.razord.top,DIRECT
        - DOMAIN,yacd.haishan.me,DIRECT
        - RULE-SET,private,DIRECT
        - RULE-SET,reject,广告拦截
        - RULE-SET,icloud,DIRECT #
        - RULE-SET,apple,DIRECT # 这三个为国内可直连地址，如果希望走代理改为PROXY
        - RULE-SET,google,PROXY # 
        - RULE-SET,tld-not-cn,PROXY
        - RULE-SET,gfw,PROXY
        - RULE-SET,greatfire,PROXY
        - RULE-SET,telegramcidr,PROXY
        - RULE-SET,lancidr,DIRECT
        - RULE-SET,cncidr,DIRECT
        - GEOIP,,DIRECT
        - GEOIP,CN,DIRECT
        - RULE-SET,direct,DIRECT
        - RULE-SET,proxy,PROXY
        - MATCH,代理模式 # 规则之外的，专门创了个策略组“代理模式”，选PROXY的时候即为白名单模式未匹配的规则全走代理，选DIRECT则为黑名单模式，未匹配到的规则全走直连

      mix-rule-providers: 
        reject: # 广告域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/reject.txt"
          path: ./ruleset/reject.yaml
          interval: 86400
          
        icloud: # iCloud 域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/icloud.txt"
          path: ./ruleset/icloud.yaml
          interval: 86400
          
        apple: # Apple 在中国大陆可直连的域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/apple.txt"
          path: ./ruleset/apple.yaml
          interval: 86400
          
        google: # Google 在中国大陆可直连的域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/google.txt"
          path: ./ruleset/google.yaml
          interval: 86400
          
        proxy: # 代理域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/proxy.txt"
          path: ./ruleset/proxy.yaml
          interval: 86400
          
        direct: # 直连域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/direct.txt"
          path: ./ruleset/direct.yaml
          interval: 86400
          
        private: # 私有网络专用域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/private.txt"
          path: ./ruleset/private.yaml
          interval: 86400
          
        gfw: # GFWList 域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/gfw.txt"
          path: ./ruleset/gfw.yaml
          interval: 86400
          
        greatfire: # GreatFire 域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/greatfire.txt"
          path: ./ruleset/greatfire.yaml
          interval: 86400
          
        tld-not-cn: # 非中国大陆使用的顶级域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/tld-not-cn.txt"
          path: ./ruleset/tld-not-cn.yaml
          interval: 86400
          
        telegramcidr: # Telegram 使用的 IP 地址列表
          type: http
          behavior: ipcidr
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/telegramcidr.txt"
          path: ./ruleset/telegramcidr.yaml
          interval: 86400
          
        cncidr: # 中国大陆 IP 地址列表
          type: http
          behavior: ipcidr
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/cncidr.txt"
          path: ./ruleset/cncidr.yaml
          interval: 86400
          
        lancidr: # 局域网 IP 及保留 IP 地址列表
          type: http
          behavior: ipcidr
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/lancidr.txt"
          path: ./ruleset/lancidr.yaml
          interval: 86400
          
        applications: # 需要直连的常见软件列表
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/applications.txt"
          path: ./ruleset/applications.yaml
          interval: 86400
